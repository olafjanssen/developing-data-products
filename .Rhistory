?qunif
qunif(0.75)
x <- 1:4
p <- x/sum(x)
temp <- rbind(x, p)
rownames(temp) <- c("X", "Prob")
temp
temp$X
temp[,1]
temp[1]
temp[1,]
temp[1,] * temp[2,]
sum(temp[1,] * temp[2,])
95/110*log(95/110)
95/110*log(95/110) + 15/110*log(15/110)
95/110*log(95/110) + 15/110*log(15/110) + 55/75*log(55/75) + 20/75*log(20/75)
?log
95/110*log2(95/110) + 15/110*log2(15/110) + 55/75*log2(55/75) + 20/75*log2(20/75)
80/95*log2(80/95) + 15/95*log2(15/95) + 20/55*log2(20/55) + 35/55*log2(35/55)
50/150*log(50/150)
50/150*log(50/150) + 100/150*log2(100/150)
50/150*log2(50/150) + 100/150*log2(100/150)
80/95*log2(80/95) + 15/95*log2(15/95) + 20/55*log2(20/55) + 35/55*log2(35/55)
80/95*log2(80/95) + 15/95*log2(15/95)
80/95*log2(80/95) + 15/95*log2(15/95) + 20/55*log2(20/55) + 35/55*log2(35/55)
80/95*log2(80/95) + 15/95*log2(15/95) + 20/55*log2(20/55) + 35/55*log2(35/55) + 0.9182958
80/95*log2(80/95) + 15/95*log2(15/95) + 20/55*log2(20/55) + 35/55*log2(35/55)
(80/95*log2(80/95) + 15/95*log2(15/95) + 20/55*log2(20/55) + 35/55*log2(35/55))/2
t.test
?t.test
t.interval
?t
qt(0.95,8)
qt(0.95,8) * 30
1100 + qt(0.95,8) * 30/3
1100 - qt(0.95,8) * 30/3
1100 + qt(0.975,8) * 30/3
1100 - qt(0.975,8) * 30/3
qt(.975, df = 8) * 1 / 3
qt(.975, df = 8) * 2 / 3
qt(.975, df = 8) * 2.6 / 3
qt(.975, df = 8) * 1.5 / 3
qt(.975, df = 8) * 0.3 / 3
qt(.975, df = 8) * 2.3 / 3
qt(.975, df = 8) * 2.6 / 3
(0.6+0.68)/2
qt(0.975,9) * 0.64/sqrt(10)
2 + qt(0.975,9) * 0.64/sqrt(10)
2 + qt(0.95,9) * 0.64/sqrt(10)
2 + qt(0.975,9) * 0.64/sqrt(10)
2 + qt(0.975,19) * 0.64/sqrt(10)
2 + qt(0.975,19) * 0.64/sqrt(20)
2 + qt(0.975,9) * 0.64/sqrt(10)
2 + qt(0.975,9) * 0.6/sqrt(10)
2 + qt(0.975,9) * 0.68/sqrt(10)
2 + qt(0.975,9) * 0.68
2 + qt(0.975,9) * 0.64
2 + qt(0.975,9) * 0.64/sqrt(10)
sqrt(0.6)
(sqrt(0.6) + sqrt(0.68))/2
2 + qt(0.975,9) * 0.8/sqrt(10)
(sqrt(0.6) + sqrt(0.68))/2
(1.5+1.8)/2
qt(0.95, 17) * 1.65/sqrt(18)
qt(0.95, 18) * 1.65/sqrt(18)
qt(0.95, 17) * 1.65/sqrt(18)
qt(0.90, 17) * 1.65/sqrt(18)
qt(0.95, 17) * 1.65/sqrt(18)
nx = 10
ny = 10
mx = 3
my = 5
Sx2 = 0.6
Sy2 = 0.68
Sr = sqrt(((nx-1)*Sx2+(ny-1)*Sy2)/(nx+ny-2))
ans = mx - my + c(-1,1) * qt(0.975, df = nx + ny - 2) * Sr * sqrt(1/nx+1/ny)
round(ans, 2)
nx = 100
ny = 100
mx = 4
my = 6
Sx2 = 0.5
Sy2 = 2
Sr = sqrt(((nx-1)*Sx2+(ny-1)*Sy2)/(nx+ny-2))
ans = my - mx + c(-1,1) * qt(0.975, df = nx + ny - 2) * Sr * sqrt(1/nx+1/ny)
round(ans, 2)
nD = 9
nP = 9
mD = -3
mP = 1
sD = 1.5
sP = 1.8
Sr = sqrt(((nD-1)*sD^2+(nP-1)*sP^2)/(nD+nD-2))
ans = mD - mP + c(-1,1) * qt(0.9, df = nD + nP - 2) * Sr * sqrt(1/nD+1/nP)
Status API Training Shop Blog About
nD = 9
nP = 9
mD = -3
mP = 1
sD = 1.5
sP = 1.8
Sr = sqrt(((nD-1)*sD^2+(nP-1)*sP^2)/(nD+nD-2))
ans = mD - mP + c(-1,1) * qt(0.9, df = nD + nP - 2) * Sr * sqrt(1/nD+1/nP)
ans
data <- c(140,132)
data <- c( c(140,132), c(138, 135), c(150,151), c(148, 146), c(135,130) )
data
data <- c(140,132)
?rbind
cbind(day1, day2)
data.frame(day1, day2)
day1 <- c(140,138,150,148,135)
day2 <- c(132,135,151,146,130)
data.frame(day1, day2)
day1 <- c(140,138,150,148,135)
day2 <- c(132,135,151,146,130)
data <- data.frame(day1, day2)
t.test
t.test(data)
t.test(data)
?t.test
t.test(data, paired=T)
t.test(data[,1],data[,2], paired=T)
qt(.975, df = 8)
qt(.975, df = 8) * 30 / 3
binom.test(3,4)
binom.test(10,1787,p=0.01)
?binom.test
binom.test(10,1787,p=0.01, alternative='less')
n1 <- n2 <- 9
x1 <- -3  ##treated
x2 <- 1  ##placebo
s1 <- 1.5  ##treated
s2 <- 1.8  ##placebo
spsq <- ( (n1 - 1) * s1^2 + (n2 - 1) * s2^2) / (n1 + n2 - 2
)
spsq
t=(x1-x2)/(spsq*sqrt(1/n1 + 1/n2))
2*pt(t,n1+n2-2)
(qnorm(.95) + qnorm(.9))^2 * .04^2 / .01^2
round( (qnorm(0.95) + qnorm(0.90))^2 * 0.04^2 / (0.01^2) )
n <- (qnorm(.95) + qnorm(.9)) ^ 2 * .04 ^ 2 / .01^2
n
n <- (qnorm(.95) + qnorm(.8)) ^ 2 * .04 ^ 2 / .01^2
(qnorm(.95) + qnorm(.8)) ^ 2 * .04 ^ 2 / .01^2
(qnorm(.95) + qnorm(.85)) ^ 2 * .04 ^ 2 / .01^2
(qnorm(.95) + qnorm(.7)) ^ 2 * .04 ^ 2 / .01^2
x <- c(0.18, -1.54, 0.42, 0.95)
w <- c(2, 1, 3, 1)
lm (x ~ w)
x <- c(0.18, -1.54, 0.42, 0.95)
w <- c(2, 1, 3, 1)
lm (w ~ x)
x
x - 0.1471
(x - 0.1471)^2
w*(x - 0.1471)^2
sum(w*(x - 0.1471)^2)
sum(w*(x - 1.077)^2)
sum(w*(x - 0.0025)^2)
sum(w*(x - 0.3)^2)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
x <- c(0.18, -1.54, 0.42, 0.95)
w <- c(2, 1, 3, 1)
x*w
mean(x*w)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
lm(x ~ y)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
lm(y ~ x)
?lm
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
lm(y ~ x)
data(mtcars)
mtcars
lm(mtcars$mpg, mtcars$weight)
lm(mtcars$mpg, mtcars$wt)
lm(mtcars$mpg ~ mtcars$wt)
0.4 * 1.5
x <- c(8.58, 10.46, 9.01, 9.64, 8.86)
x <- c(8.58, 10.46, 9.01, 9.64, 8.86)
x - mean(x)
(x - mean(x))/SD(x)
(x - mean(x))/sd(x)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
lm(y ~ x)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
sum((x - 0.573)^2)
sum((x - 0.8)^2)
sum((x - 0.36)^2)
sum((x - 0.44)^2)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
lm(y ~ x)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
lm(y ~ x)
lm(x ~ y)
-1.713/-0.04462
2*sd(y)/sd(x)
var(y)/var(x)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
lm ( x ~ y)
lm( x ~ y)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
lm( x ~ y)
lm( y ~ x)
lm( x ~ y)
lm( y ~ x)
lm( y ~ x)
lm( y ~ x, offset=0)
lm( y ~ 0 + x)
0.25/0.25
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
manipulate(myPlot(s), slider = x(0, 2, step = 0.1))
manipulate(myPlot(s), x.s = slider(0, 2, step = 0.1))
manipulate(myPlot, s = slider(0, 2, step = 0.1))
manipulate(myPlot, s = slider(0, 2, step = 0.1))
library(airquality)
library(rCharts)
install.packages("rCharts")
install.packages("airquality")
require(devtools)
install_github('rCharts', 'ramnathv')
airquality
dTable(airquality, sPaginationType = "full_numbers")
library(rCharts)
dTable(airquality, sPaginationType = "full_numbers")
d <- data.frame(airquality, stringsAsFactors = FALSE) print(d)
library(shiny)
shinyUI(pageWithSidebar(
headerPanel("Data science FTW!"),
sidebarPanel(
h2('Big text')
h3('Sidebar')
),
mainPanel(
h3('Main Panel text')
)
))
21/22
11/12
4/5
9/10
x <- c(0.61, 0.93, 0.83, 0.35, 0.54, 0.16, 0.91, 0.62, 0.62)
y <- c(0.67, 0.84, 0.6, 0.18, 0.85, 0.47, 1.1, 0.65, 0.36)
t_test
t
?t
test
ttest
x <- c(0.61, 0.93, 0.83, 0.35, 0.54, 0.16, 0.91, 0.62, 0.62)
y <- c(0.67, 0.84, 0.6, 0.18, 0.85, 0.47, 1.1, 0.65, 0.36)
fit <- lm(y ~ x)
summary(fit)
mtcars
names(mtcars)
fit <- lm(mtcars$mpg ~ mtcars$wt)
summary(fit)
fit <- lm(mtcars$mpg ~ mtcars$wt)
summary(fit)
coef <- summary(fit)$coefficients
coef[1,1] + c(-1,1) * qt(0.975, df=fit$df) * coef[1,2]
coef[1,1] + c(-1,1) * qt(0.95, df=fit$df) * coef[1,2]
mean(mtcars$mpg)
qt(0.95, df=fit$df)
qt(0.95, df=fit$df) * mean(mtcars$mpg)
qt(0.95, df=fit$df) * mean(mtcars$mpg)
(qt(0.95, df=fit$df) * mean(mtcars$mpg))/2
plot(mtcars$mpg)
plot(mtcars$mpg, mtcars$wt)
plot(mtcars$wt, mtcars$mpg)
?mtcars
plot(mtcars$wt, mtcars$mpg)
setwd("~/Dropbox/MOOCs/R/dataproducts")
runapp("developing-data-products")
shiny::runApp('developing-data-products')
install.packages(c("adehabitat", "amap", "AppliedPredictiveModeling", "arules", "arulesViz", "boot", "BradleyTerry2", "car", "caret", "caTools", "class", "cluster", "codetools", "coin", "descr", "digest", "doBy", "e1071", "earth", "fBasics", "flexmix", "Formula", "fpc", "ggdendro", "gplots", "gss", "gWidgets", "hexbin", "Hmisc", "httpuv", "httr", "igraph", "jsonlite", "klaR", "labeling", "lava", "lme4", "magrittr", "maps", "MASS", "Matrix", "mclust", "mgcv", "mice", "minqa", "multcomp", "mvtnorm", "network", "nlme", "NLP", "party", "plotmo", "plotrix", "pmml", "prim", "pROC", "prodlim", "proxy", "psych", "quantmod", "R.utils", "randomForest", "RANN", "raster", "rattle", "RColorBrewer", "Rcpp", "RcppEigen", "RCurl", "reshape2", "RJDBC", "rjson", "rms", "ROAuth", "rpart.plot", "RSQLite", "RUnit", "sandwich", "SDMTools", "seriation", "shiny", "SnowballC", "sp", "spam", "SparseM", "sqldf", "tables", "testthat", "TH.data", "tidyr", "timeDate", "timeSeries", "TSP", "vcd", "verification", "xlsx", "xlsxjars", "xtable", "yaml"))
Then this `shiny` web-app might be for you!
Then this shiny web-app might be for you!
setwd("~/Dropbox/MOOCs/R/dataproducts/developing-data-products")
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
